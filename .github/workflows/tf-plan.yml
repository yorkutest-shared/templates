name: 'Terraform Plan'

on:
  workflow_call:
    inputs:
        targetEnv:
          required: true
          type: string
        commandOptions:
          type: string
          default: ''
        storageSubscriptionId:
          type: string
          default: ed7af097-864f-41f7-9c0f-413b22cc9391
        storageTenantId:
          type: string
          default: 34531318-7011-4fd4-87f0-a43816c49bd0
        storageResourceGroup:
          type: string
          default: RG-YU-CC-tfstate-all
        storageAccountName:
          type: string
          default: yucctfstate01
        storageContainerName:
          type: string
          default: ${{github.repository_owner}}
        additionalBackendConfig:
          type: string
          default: 'use_oidc=true'
        storageKey:
          type: string
          default: ''
        variableFile:
          type: string
          default: ''
        runsOnGroup:
          type: string
          default: yorku-shared-runners-new
    outputs:
      tfplanExitCode:
        description: "Plan Exit code"
        value: ${{ jobs.terraform-plan.outputs.tfplanExitCode }}
      summary:
        description: "Summary of Plan"
        value: ${{ jobs.terraform-plan.outputs.summary }}
  
env:
  COMMAND_OPTIONS: ${{ inputs.commandOptions == '' && format('-var-file=variables/{0}.tfvars', inputs.variableFile == '' &&  inputs.targetEnv || inputs.variableFile) || inputs.commandOptions}}
  BACKEND_CONFIG: ${{ format('-backend-config="subscription_id={0}" -backend-config="tenant_id={1}" -backend-config="resource_group_name={2}" -backend-config="storage_account_name={3}" -backend-config="container_name={4}" -backend-config="{5}" -backend-config="key={6}"',inputs.storageSubscriptionId ,inputs.storageTenantId ,inputs.storageResourceGroup , inputs.storageAccountName,inputs.storageContainerName ,inputs.additionalBackendConfig , inputs.storageKey == '' && format('{0}/{1}{2}', inputs.targetEnv, github.event.repository.name, '.tfstate') || inputs.storageKey) }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: 
      group: ${{ inputs.runsOnGroup }}
    environment:
      name: ${{ inputs.targetEnv }}
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
      ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ inputs.storageSubscriptionId }}"
      ARM_TENANT_ID: "${{ inputs.storageTenantId }}"
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      summary: ${{ steps.tf-plan-string.outputs.summary }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init ${{ env.BACKEND_CONFIG }}

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan ${{ env.COMMAND_OPTIONS }} -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    ## If this is a PR post the changes
    #- name: Push Terraform Output to PR
    #  if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request'
    #  uses: actions/github-script@v6
    #  env:
    #    SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
    #  with:
    #      github-token: ${{ secrets.GITHUB_TOKEN }}
    #      script: |
    #        const body = `${process.env.SUMMARY}`;
    #        github.rest.issues.createComment({
    #            issue_number: context.issue.number,
    #            owner: context.repo.owner,
    #            repo: context.repo.repo,
    #            body: body
    #        })
